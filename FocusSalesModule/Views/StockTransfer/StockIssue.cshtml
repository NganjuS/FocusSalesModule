@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Issue</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="~/Content/select2.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container-main {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .page-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-header h1 {
            margin: 0;
            font-size: 28px;
            font-weight: 600;
        }

        .btn-save-issue {
            background: white;
            color: #667eea;
            border: none;
            padding: 10px 25px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-save-issue:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 255, 255, 0.3);
        }

        .form-section {
            padding: 30px;
        }

        .header-section {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 25px;
        }

        .header-section h3 {
            color: #667eea;
            margin-bottom: 20px;
            font-size: 20px;
            font-weight: 600;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .form-group select,
        .form-group input,
        .form-group textarea {
            padding: 10px 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s;
        }

        .form-group select:focus,
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }

        .body-section h3 {
            color: #667eea;
            margin-bottom: 20px;
            font-size: 20px;
            font-weight: 600;
        }

        .table-container {
            overflow-x: auto;
            margin-bottom: 20px;
        }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .items-table thead {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .items-table th {
            padding: 15px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
        }

        .items-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e0e0e0;
        }

        .items-table tbody tr:hover {
            background: #f8f9fa;
        }

        .items-table input,
        .items-table select {
            width: 100%;
            padding: 8px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 14px;
        }

        .items-table input:focus,
        .items-table select:focus {
            outline: none;
            border-color: #667eea;
        }

        .items-table input:read-only {
            background: #f5f5f5;
            cursor: not-allowed;
        }

        .btn-remove-row {
            background: #dc3545;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .btn-remove-row:hover {
            background: #c82333;
            transform: scale(1.05);
        }

        .btn-add-row {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s;
        }

        .btn-add-row:hover {
            background: #218838;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
        }

        .select2-container {
            width: 100% !important;
        }

        .select2-container--default .select2-selection--single {
            height: 38px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 34px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 34px;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .alert-success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .alert-danger {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="container-main" x-data="stockIssueManager()">
        <!-- Page Header -->
        <div class="page-header">
            <h1><i class="bi bi-box-arrow-right me-2"></i>Stock Issue</h1>
            <button class="btn-save-issue" @click="saveStockIssue()">
                <i class="bi bi-check-circle me-2"></i>Save Stock Issue
            </button>
        </div>

        <!-- Form Section -->
        <div class="form-section">
            <!-- Alert Messages -->
            <div x-show="alertMessage" class="alert" :class="alertType === 'success' ? 'alert-success' : 'alert-danger'" x-text="alertMessage"></div>

            <!-- Header Section -->
            <div class="header-section">
                <h3><i class="bi bi-info-circle me-2"></i>Transfer Details</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label>From Outlet <span style="color: red;">*</span></label>
                        <select id="fromOutlet" x-model="stockIssue.fromOutletId">
                            <option value="">Select From Outlet</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>To Outlet <span style="color: red;">*</span></label>
                        <select id="toOutlet" x-model="stockIssue.toOutletId">
                            <option value="">Select To Outlet</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Narration</label>
                        <textarea x-model="stockIssue.narration" placeholder="Enter any notes or remarks"></textarea>
                    </div>
                </div>
            </div>

            <!-- Body Section -->
            <div class="body-section">
                <h3><i class="bi bi-list-ul me-2"></i>Items</h3>
                <div class="table-container">
                    <table class="items-table">
                        <thead>
                            <tr>
                                <th style="width: 30%;">Item <span style="color: #ffc107;">*</span></th>
                                <th style="width: 15%;">Code</th>
                                <th style="width: 10%;">Unit</th>
                                <th style="width: 15%;">Quantity <span style="color: #ffc107;">*</span></th>
                                <th style="width: 20%;">RMA NO</th>
                                <th style="width: 10%;">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <template x-for="(item, index) in stockIssue.items" :key="index">
                                <tr>
                                    <td>
                                        <select :id="'product-' + index" x-model="item.productId" @change="updateProductDetails(index)" class="product-select">
                                            <option value="">Select Product</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="text" x-model="item.productCode" readonly>
                                    </td>
                                    <td>
                                        <input type="text" x-model="item.unit" readonly>
                                    </td>
                                    <td>
                                        <input type="number" x-model="item.quantity" min="0" step="0.01" placeholder="0.00">
                                    </td>
                                    <td>
                                        <input type="text" x-model="item.rmaNo" placeholder="Enter RMA NO">
                                    </td>
                                    <td>
                                        <button class="btn-remove-row" @click="removeRow(index)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                </div>
                <button class="btn-add-row" @click="addRow()">
                    <i class="bi bi-plus-circle"></i>Add Row
                </button>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/select2.min.js"></script>
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.3/cdn.min.js"></script>

    <script>
        function stockIssueManager() {
            return {
                outlets: [],
                products: [],
                stockIssue: {
                    fromOutletId: '',
                    toOutletId: '',
                    narration: '',
                    items: []
                },
                alertMessage: '',
                alertType: '',

                init() {
                    this.loadOutlets();
                    this.loadProducts();
                    this.addRow(); // Add first row by default
                },

                async loadOutlets() {
                    try {
                        const response = await fetch('/StockTransfer/GetOutlets');
                        const result = await response.json();
                        if (result.success) {
                            this.outlets = result.data;
                            this.$nextTick(() => {
                                this.initializeOutletSelects();
                            });
                        }
                    } catch (error) {
                        console.error('Error loading outlets:', error);
                    }
                },

                async loadProducts() {
                    try {
                        const response = await fetch('/StockTransfer/GetProducts');
                        const result = await response.json();
                        if (result.success) {
                            this.products = result.data;
                            this.$nextTick(() => {
                                this.initializeProductSelects();
                            });
                        }
                    } catch (error) {
                        console.error('Error loading products:', error);
                    }
                },

                initializeOutletSelects() {
                    $('#fromOutlet, #toOutlet').select2({
                        data: this.outlets,
                        placeholder: 'Select Outlet',
                        allowClear: true
                    });

                    const self = this;
                    $('#fromOutlet').on('change', function() {
                        self.stockIssue.fromOutletId = $(this).val();
                    });

                    $('#toOutlet').on('change', function() {
                        self.stockIssue.toOutletId = $(this).val();
                    });
                },

                initializeProductSelects() {
                    const self = this;
                    $('.product-select').each(function() {
                        const $select = $(this);
                        if (!$select.hasClass('select2-hidden-accessible')) {
                            $select.select2({
                                data: self.products,
                                placeholder: 'Select Product',
                                allowClear: true
                            });

                            const index = parseInt($select.attr('id').split('-')[1]);
                            $select.on('change', function() {
                                self.stockIssue.items[index].productId = $(this).val();
                                self.updateProductDetails(index);
                            });
                        }
                    });
                },

                addRow() {
                    this.stockIssue.items.push({
                        productId: '',
                        productCode: '',
                        unit: '',
                        quantity: 0,
                        rmaNo: ''
                    });

                    this.$nextTick(() => {
                        this.initializeProductSelects();
                    });
                },

                removeRow(index) {
                    if (this.stockIssue.items.length > 1) {
                        // Destroy select2 before removing
                        const $select = $('#product-' + index);
                        if ($select.hasClass('select2-hidden-accessible')) {
                            $select.select2('destroy');
                        }
                        this.stockIssue.items.splice(index, 1);
                    } else {
                        this.showAlert('At least one item is required', 'error');
                    }
                },

                updateProductDetails(index) {
                    const item = this.stockIssue.items[index];
                    if (item.productId) {
                        const product = this.products.find(p => p.id == item.productId);
                        if (product) {
                            item.productCode = product.code;
                            item.unit = product.unit;
                        }
                    } else {
                        item.productCode = '';
                        item.unit = '';
                    }
                },

                async saveStockIssue() {
                    // Validation
                    if (!this.stockIssue.fromOutletId) {
                        this.showAlert('Please select From Outlet', 'error');
                        return;
                    }

                    if (!this.stockIssue.toOutletId) {
                        this.showAlert('Please select To Outlet', 'error');
                        return;
                    }

                    if (this.stockIssue.fromOutletId === this.stockIssue.toOutletId) {
                        this.showAlert('From and To outlets cannot be the same', 'error');
                        return;
                    }

                    if (this.stockIssue.items.length === 0) {
                        this.showAlert('Please add at least one item', 'error');
                        return;
                    }

                    // Validate items
                    for (let i = 0; i < this.stockIssue.items.length; i++) {
                        const item = this.stockIssue.items[i];
                        if (!item.productId) {
                            this.showAlert(`Please select a product for row ${i + 1}`, 'error');
                            return;
                        }
                        if (!item.quantity || item.quantity <= 0) {
                            this.showAlert(`Please enter a valid quantity for row ${i + 1}`, 'error');
                            return;
                        }
                    }

                    try {
                        const response = await fetch('/StockTransfer/CreateStockTransfer', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(this.stockIssue)
                        });

                        const result = await response.json();
                        if (result.success) {
                            this.showAlert(`Stock Issue created successfully. Issue No: ${result.stockIssueNo}`, 'success');
                            // Reset form after 2 seconds
                            setTimeout(() => {
                                this.resetForm();
                            }, 2000);
                        } else {
                            this.showAlert(result.message || 'Error creating stock issue', 'error');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        this.showAlert('Error creating stock issue', 'error');
                    }
                },

                resetForm() {
                    // Destroy all select2 instances
                    $('.product-select').each(function() {
                        if ($(this).hasClass('select2-hidden-accessible')) {
                            $(this).select2('destroy');
                        }
                    });

                    this.stockIssue = {
                        fromOutletId: '',
                        toOutletId: '',
                        narration: '',
                        items: []
                    };

                    $('#fromOutlet, #toOutlet').val('').trigger('change');

                    this.alertMessage = '';
                    this.addRow();
                },

                showAlert(message, type) {
                    this.alertMessage = message;
                    this.alertType = type;
                    setTimeout(() => {
                        this.alertMessage = '';
                    }, 5000);
                }
            }
        }
    </script>
</body>
</html>
